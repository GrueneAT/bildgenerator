# Build and Release Workflow
name: Build & Release

on:
  # Create releases on version tags
  push:
    tags:
      - 'v*.*.*'
  
  # Manual trigger for pre-releases
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create a pre-release'
        required: false
        default: false
        type: boolean
      tag:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0-beta'

permissions:
  contents: write
  
jobs:
  build-and-release:
    name: Build Production Assets & Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          
      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests before build
        run: |
          echo "üß™ Running tests before creating release..."
          npm run test
          
      - name: Create logo directories
        run: |
          mkdir -p resources/images/logos/gemeinden
          mkdir -p resources/images/logos/bundeslaender
          mkdir -p resources/images/logos/domains
          
      - name: Generate logo JSON files
        run: |
          if [ -n "$(ls resources/images/logos/gemeinden/ 2>/dev/null)" ]; then
            make logo-json
            echo "‚úÖ Logo JSON files generated"
          else
            echo "‚ÑπÔ∏è No logo images found, using existing configuration"
          fi
          
      - name: Run production build
        run: |
          echo "üèóÔ∏è Creating optimized production build..."
          npm run build
          echo "‚úÖ Production build completed"
          
      - name: Generate build report
        run: |
          echo "üìä Build Report" > build-report.md
          echo "=============" >> build-report.md
          echo "" >> build-report.md
          echo "## Build Summary" >> build-report.md
          echo "- **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build-report.md
          echo "- **Commit**: ${{ github.sha }}" >> build-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
          echo "" >> build-report.md
          echo "## Asset Sizes" >> build-report.md
          echo "| File | Size |" >> build-report.md
          echo "|------|------|" >> build-report.md
          echo "| app.min.js | $(du -h build/app.min.js | cut -f1) |" >> build-report.md
          echo "| app.min.css | $(du -h build/app.min.css | cut -f1) |" >> build-report.md
          echo "| index.html | $(du -h build/index.html | cut -f1) |" >> build-report.md
          echo "" >> build-report.md
          echo "## Total Build Size" >> build-report.md
          echo "**$(du -sh build/ | cut -f1)**" >> build-report.md
          echo "" >> build-report.md
          echo "## Features" >> build-report.md
          echo "- ‚úÖ Minified and optimized JavaScript bundle" >> build-report.md
          echo "- ‚úÖ Minified and optimized CSS bundle" >> build-report.md
          echo "- ‚úÖ Source maps for debugging" >> build-report.md
          echo "- ‚úÖ Cache busting with timestamps" >> build-report.md
          echo "- ‚úÖ Production-ready HTML" >> build-report.md
          echo "- ‚úÖ All vendor dependencies included" >> build-report.md
          
      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          
          # Create a deployment-ready package
          mkdir -p release-package
          cp -r build/* release-package/
          
          # Add additional deployment files
          cp LICENSE release-package/ 2>/dev/null || echo "No LICENSE file found"
          cp README.md release-package/ 2>/dev/null || echo "No README file found"
          
          # Create deployment instructions
          cat > release-package/DEPLOYMENT.md << 'EOF'
          # Deployment Instructions
          
          This package contains the production-ready build of Gr√ºne Bildgenerator.
          
          ## Quick Deploy
          1. Upload all files to your web server
          2. Serve `index.html` as the main entry point
          3. Ensure proper MIME types for static assets
          
          ## Files Included
          - `index.html` - Main application (production optimized)
          - `app.min.js` - Bundled and minified JavaScript
          - `app.min.css` - Bundled and minified CSS
          - `vendors/` - Third-party dependencies
          - `resources/` - Static assets (images, fonts, etc.)
          
          ## Requirements
          - Web server with static file serving
          - No backend dependencies required
          - Modern browser support (ES2017+)
          
          ## Cache Configuration
          Recommended cache headers:
          - HTML files: `Cache-Control: no-cache`
          - JS/CSS files: `Cache-Control: public, max-age=31536000`
          - Images/fonts: `Cache-Control: public, max-age=2592000`
          EOF
          
          # Create archive
          tar -czf gruene-bildgenerator-${{ github.ref_name }}.tar.gz -C release-package .
          zip -r gruene-bildgenerator-${{ github.ref_name }}.zip release-package/
          
          echo "‚úÖ Deployment packages created"
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "üìù Generating changelog..."
          
          # Get the latest tag (previous release)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Comparing with previous tag: $PREVIOUS_TAG"
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            echo "No previous tags found, using all commits"
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD~10..HEAD)
          fi
          
          # Create release notes
          cat > release-notes.md << EOF
          ## Changes
          
          $CHANGELOG
          
          ## Build Information
          - **Commit**: \`${{ github.sha }}\`
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **JavaScript Bundle**: $(du -h build/app.min.js | cut -f1)
          - **CSS Bundle**: $(du -h build/app.min.css | cut -f1)
          - **Total Size**: $(du -sh build/ | cut -f1)
          
          ## Installation
          
          ### Option 1: Download and Extract
          1. Download \`gruene-bildgenerator-${{ github.ref_name }}.zip\`
          2. Extract to your web server directory
          3. Serve \`index.html\` as the main page
          
          ### Option 2: Direct Download
          Download individual build artifacts and deploy as needed.
          
          ## Browser Support
          - Chrome 80+
          - Firefox 80+
          - Safari 14+
          - Edge 80+
          EOF
          
          echo "changelog_file=release-notes.md" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: "Gr√ºne Bildgenerator ${{ github.event.inputs.tag || github.ref_name }}"
          body_path: release-notes.md
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            gruene-bildgenerator-${{ github.ref_name }}.tar.gz
            gruene-bildgenerator-${{ github.ref_name }}.zip
            build-report.md
            build/app.min.js
            build/app.min.css
            build/index.html
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload build artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: production-release-${{ github.ref_name }}
          path: |
            build/
            gruene-bildgenerator-${{ github.ref_name }}.tar.gz
            gruene-bildgenerator-${{ github.ref_name }}.zip
            build-report.md
          retention-days: 30