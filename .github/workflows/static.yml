# Comprehensive CI/CD pipeline with testing and deployment
name: CI Pipeline

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "develop"]
  
  # Pull requests to main branch
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      update_visual_baseline:
        description: 'Update visual regression baseline images'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Unit tests and code quality
  test:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # Visual regression testing
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Node.js dependencies
        run: npm ci
        
      - name: Install Playwright with Chromium
        run: npx playwright install --with-deps chromium
        
      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Generate logo JSON files
        run: python3 logo_json.py
        
      - name: Verify reference images exist
        run: |
          echo "Checking reference images..."
          ls -la e2e-regression-source/
          if [ -z "$(ls -A e2e-regression-source/)" ]; then
            echo "❌ No reference images found in e2e-regression-source/"
            echo "Please run the baseline update workflow first"
            exit 1
          else
            echo "✅ Reference images found:"
            ls -1 e2e-regression-source/*.png | wc -l | xargs echo "Total images:"
          fi
          
      - name: Run visual regression tests
        run: |
          echo "🎨 Running pixel-perfect visual regression tests..."
          npx playwright test e2e/visual-regression.spec.js \
            --timeout=90000 \
            --reporter=list
        env:
          CI: true
          PLAYWRIGHT_BROWSERS_PATH: 0
          
      - name: Archive visual test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-failure-${{ github.run_number }}
          path: |
            e2e-comparison-results/
            test-results/
            playwright-report/
          retention-days: 14
          
      - name: Update baseline images if requested
        if: ${{ github.event.inputs.update_visual_baseline == 'true' && github.event_name == 'workflow_dispatch' }}
        run: |
          echo "🔄 Updating baseline images..."
          
          # Copy comparison images to reference directory
          if [ -d "e2e-comparison-results" ]; then
            cp e2e-comparison-results/*.png e2e-regression-source/ 2>/dev/null || true
            echo "✅ Baseline images updated"
          else
            echo "ℹ️ No new comparison images to update"
          fi
          
      - name: Commit updated baselines
        if: ${{ github.event.inputs.update_visual_baseline == 'true' && github.event_name == 'workflow_dispatch' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add e2e-regression-source/
          
          if git diff --staged --quiet; then
            echo "ℹ️ No baseline changes to commit"
          else
            git commit -m "🎨 Update visual regression baselines

            Manual baseline update
            Triggered by: @${{ github.actor }}
            Commit: ${{ github.sha }}
            
            🤖 Automated via workflow_dispatch"
            git push
            echo "✅ Baseline images committed and pushed"
          fi

  # End-to-end testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Generate logo JSON files
        run: python3 logo_json.py
        
      - name: Run E2E tests
        run: npx playwright test --exclude="**/visual-regression.spec.js"
        env:
          CI: true
          
      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Build and deploy (only on main branch)
  deploy:
    name: Build & Deploy to GitHub Pages
    needs: [test, visual-regression, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build CSS
        run: npm run build-css-prod
      - name: Create logo directories (for logo generation)
        run: |
          mkdir -p resources/images/logos/gemeinden
          mkdir -p resources/images/logos/bundeslaender
          mkdir -p resources/images/logos/domains
      - name: Generate logo JSON files (if logo images exist)
        run: |
          if [ -n "$(ls resources/images/logos/gemeinden/ 2>/dev/null)" ]; then
            make logo-json
          else
            echo "No logo images found, using existing index.json"
          fi
      - name: Generate production HTML with embedded logos
        run: |
          if [ -f resources/images/logos/index.json ]; then
            python3 embed_logos.py index.html index-production.html
          else
            echo "No logo data found, using original index.html"
            cp index.html index-production.html
          fi
      - name: Copy production HTML as index for deployment
        run: cp index-production.html index.html
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
