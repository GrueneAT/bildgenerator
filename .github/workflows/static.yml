# Comprehensive CI/CD pipeline with testing, building, and deployment
name: CI/CD Pipeline

on:
  # Runs on pushes to any branch
  push:
    branches: ["*"]

  # Pull requests to main branch
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      update_visual_baseline:
        description: "Update visual regression baseline images"
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Unit tests and code quality
  test:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # Visual regression testing
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Playwright with Chromium
        run: npx playwright install --with-deps chromium

      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Generate logo JSON files
        run: python3 logo_json.py

      - name: Verify reference images exist
        run: |
          echo "Checking reference images..."
          ls -la visual-regression/reference-images/
          if [ -z "$(ls -A visual-regression/reference-images/)" ]; then
            echo "❌ No reference images found in visual-regression/reference-images/"
            echo "Please run the baseline update workflow first"
            exit 1
          else
            echo "✅ Reference images found:"
            ls -1 visual-regression/reference-images/*.png | wc -l | xargs echo "Total images:"
          fi

      - name: List available visual regression tests
        run: |
          echo "📋 Available visual regression tests:"
          npm run test:visual-strict -- --list

      - name: Run visual regression tests
        run: |
          echo "🎨 Running pixel-perfect visual regression tests..."
          npm run test:visual-strict
        env:
          CI: true

      - name: Archive visual test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-failure-${{ github.run_number }}
          path: |
            visual-regression/comparison-results/
            test-results/
            playwright-report/
          retention-days: 14

  # End-to-end testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Generate logo JSON files
        run: python3 logo_json.py

      - name: Run E2E tests
        run: npx playwright test e2e/
        env:
          CI: true

      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Build for production
  build:
    name: Production Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      build-path: ${{ steps.build.outputs.path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python for logo processing
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: npm ci

      - name: Create logo directories (for logo generation)
        run: |
          mkdir -p resources/images/logos/gemeinden
          mkdir -p resources/images/logos/bundeslaender
          mkdir -p resources/images/logos/domains

      - name: Generate logo JSON files (if logo images exist)
        run: |
          if [ -n "$(ls resources/images/logos/gemeinden/ 2>/dev/null)" ]; then
            make logo-json
          else
            echo "No logo images found, using existing index.json"
          fi

      - name: Run production build
        id: build
        run: |
          echo "🏗️ Running production build with optimized assets..."
          npm run build
          echo "✅ Production build completed"
          echo "path=build" >> $GITHUB_OUTPUT

      - name: Verify build output
        run: |
          echo "📦 Verifying build artifacts..."
          ls -la build/
          echo "📊 Build sizes:"
          echo "CSS: $(du -h build/app.min.css | cut -f1)"
          echo "JS: $(du -h build/app.min.js | cut -f1)"
          echo "HTML: $(du -h build/index.html | cut -f1)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: build/
          retention-days: 7

  # Deploy to GitHub Pages (only on main branch)
  deploy:
    name: Deploy to GitHub Pages
    needs: [test, visual-regression, e2e-tests, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./deploy

      - name: Verify deployment files
        run: |
          echo "📁 Deployment directory contents:"
          find ./deploy -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -20
          echo "📊 Total files: $(find ./deploy -type f | wc -l)"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./deploy"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Commit build artifacts to production branch
  commit-artifacts:
    name: Commit Build Artifacts to Production Branch
    needs: [build, deploy]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./build-artifacts

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create or switch to production branch
        run: |
          git checkout -B production
          git rm -rf . --ignore-unmatch
          echo "# Production Build Artifacts" > README.md
          echo "" >> README.md
          echo "This branch contains the built artifacts for production deployment." >> README.md
          echo "Built from commit: ${{ github.sha }}" >> README.md
          echo "Build date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md

      - name: Copy build artifacts
        run: |
          mkdir -p bundle
          cp -r ./build-artifacts/* ./bundle/
          rm -rf ./build-artifacts

      - name: Commit and push production artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy production build from ${{ github.sha }}

            Built from main branch commit: ${{ github.sha }}
            Workflow run: ${{ github.run_number }}
            Build date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            "
            echo "Pushing to production branch..."
            git push --force-with-lease origin production
            echo "✅ Production artifacts committed to production branch"
          fi
